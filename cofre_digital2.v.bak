// Módulo Principal: Cofre Digital para DE10-Lite (Versão Refatorada)
module cofre_digital2 (
    input wire clk,         // CLOCK_50 (50 MHz, pino P11)
    input wire reset,       // KEY0 (pino B8, lógica negativa)
    input wire A,           // SW9 (pino F15, lógica positiva: 0=Remoto, 1=Normal)
    input wire B,           // KEY1 (pino A7, lógica negativa)
    input wire [3:0] senha, // SW3-SW0 (pinos C12, D12, C11, C10)
    input wire SAF,         // SW4 (pino A12, Abertura Remota)
    input wire H,           // SW5 (pino B12, Chave de Emergência)
    output wire [15:0] display, // HEX1-HEX0 (7 segmentos, 2 dígitos)
    output wire CLOSE,      // LEDR0 (pino A8, Atuador de fechamento)
    output wire abertura,   // LEDR1 (pino A9, Sinal de abertura)
    output wire SPA,        // LEDR2 (pino A10, Indica porta fechada/aberta)
    output wire SPN         // LEDR3 (pino B10, Indica pino de fechamento)
);

    wire reset_clean, B_clean;
    wire [2:0] estado_atual;
    
    reg B_sync, rst_sync, B_sync_d1, rst_sync_d1;

    always @(posedge clk) begin
        B_sync      <= B;
        B_sync_d1   <= B_sync;

        rst_sync    <= reset;
        rst_sync_d1 <= rst_sync;
    end

    assign B_clean     = (B_sync && ~B_sync_d1); // Borda de subida em B
    assign reset_clean = (rst_sync_d1 && ~rst_sync_d1); // Borda de subida em reset

    state_machine sm (
        .clk(clk), .reset(reset_clean), .A(A), .B(B_clean), .senha(senha),
        .SAF(SAF), .H(H),
        .estado_atual(estado_atual), .SPA(SPA), .SPN(SPN)
    );

    output_driver od (
        .clk(clk), .reset(reset_clean), .estado_atual(estado_atual),
        .display(display), .CLOSE(CLOSE), .abertura(abertura)
    );
endmodule


module output_driver (
    input wire clk, reset,
    input wire [2:0] estado_atual,
    output reg [15:0] display,
    output reg CLOSE,
    output reg abertura
);
    function [15:0] estado_para_display;
        input [2:0] estado;
        case (estado)
            3'b000: estado_para_display = {8'h77, 8'h7C}; // AB
            3'b001: estado_para_display = {8'h77, 8'h38}; // AL
            3'b010: estado_para_display = {8'h73, 8'h71}; // PF
            3'b011: estado_para_display = {8'h71, 8'h79}; // FE
            3'b100: estado_para_display = {8'h79, 8'h06}; // E1
            3'b101: estado_para_display = {8'h79, 8'h5B}; // E2
            3'b110: estado_para_display = {8'h7C, 8'h38}; // BL
            3'b111: estado_para_display = {8'h79, 8'h37}; // EM
           default: estado_para_display = {8'h40, 8'h40}; // --
        endcase
    endfunction

    always @(posedge clk) begin
        if (reset) begin
            display <= 16'h4040;
            CLOSE <= 1'b0;
            abertura <= 1'b0;
        end else begin
            display <= estado_para_display(estado_atual);
            CLOSE <= (estado_atual == 3'b011);
            abertura <= (estado_atual == 3'b000);
        end
    end
endmodule